{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "041a7413",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:46.238630Z",
     "iopub.status.busy": "2023-03-09T04:54:46.237972Z",
     "iopub.status.idle": "2023-03-09T04:54:46.259770Z",
     "shell.execute_reply": "2023-03-09T04:54:46.259065Z"
    },
    "papermill": {
     "duration": 0.032043,
     "end_time": "2023-03-09T04:54:46.262473",
     "exception": false,
     "start_time": "2023-03-09T04:54:46.230430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/suv-data/suv_data.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b9467c9",
   "metadata": {
    "papermill": {
     "duration": 0.00339,
     "end_time": "2023-03-09T04:54:46.270426",
     "exception": false,
     "start_time": "2023-03-09T04:54:46.267036",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**IMPORTING LIBRARIES**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7308c1b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:46.279257Z",
     "iopub.status.busy": "2023-03-09T04:54:46.278925Z",
     "iopub.status.idle": "2023-03-09T04:54:47.569944Z",
     "shell.execute_reply": "2023-03-09T04:54:47.568907Z"
    },
    "papermill": {
     "duration": 1.299174,
     "end_time": "2023-03-09T04:54:47.573158",
     "exception": false,
     "start_time": "2023-03-09T04:54:46.273984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from pandas.plotting import scatter_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcfc9998",
   "metadata": {
    "papermill": {
     "duration": 0.003348,
     "end_time": "2023-03-09T04:54:47.580419",
     "exception": false,
     "start_time": "2023-03-09T04:54:47.577071",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**READING DATASET**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cfb2f2d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:47.589231Z",
     "iopub.status.busy": "2023-03-09T04:54:47.588879Z",
     "iopub.status.idle": "2023-03-09T04:54:47.623831Z",
     "shell.execute_reply": "2023-03-09T04:54:47.622397Z"
    },
    "papermill": {
     "duration": 0.042043,
     "end_time": "2023-03-09T04:54:47.625967",
     "exception": false,
     "start_time": "2023-03-09T04:54:47.583924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Purchased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15624510</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>19000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15810944</td>\n",
       "      <td>Male</td>\n",
       "      <td>35</td>\n",
       "      <td>20000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15668575</td>\n",
       "      <td>Female</td>\n",
       "      <td>26</td>\n",
       "      <td>43000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15603246</td>\n",
       "      <td>Female</td>\n",
       "      <td>27</td>\n",
       "      <td>57000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15804002</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>76000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15728773</td>\n",
       "      <td>Male</td>\n",
       "      <td>27</td>\n",
       "      <td>58000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>15598044</td>\n",
       "      <td>Female</td>\n",
       "      <td>27</td>\n",
       "      <td>84000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>15694829</td>\n",
       "      <td>Female</td>\n",
       "      <td>32</td>\n",
       "      <td>150000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>15600575</td>\n",
       "      <td>Male</td>\n",
       "      <td>25</td>\n",
       "      <td>33000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>15727311</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>65000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    User ID  Gender  Age  EstimatedSalary  Purchased\n",
       "0  15624510    Male   19            19000          0\n",
       "1  15810944    Male   35            20000          0\n",
       "2  15668575  Female   26            43000          0\n",
       "3  15603246  Female   27            57000          0\n",
       "4  15804002    Male   19            76000          0\n",
       "5  15728773    Male   27            58000          0\n",
       "6  15598044  Female   27            84000          0\n",
       "7  15694829  Female   32           150000          1\n",
       "8  15600575    Male   25            33000          0\n",
       "9  15727311  Female   35            65000          0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_set= pd.read_csv(\"/kaggle/input/suv-data/suv_data.csv\")\n",
    "data_set.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc180ae2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:47.636129Z",
     "iopub.status.busy": "2023-03-09T04:54:47.635706Z",
     "iopub.status.idle": "2023-03-09T04:54:47.641776Z",
     "shell.execute_reply": "2023-03-09T04:54:47.640868Z"
    },
    "papermill": {
     "duration": 0.014063,
     "end_time": "2023-03-09T04:54:47.643860",
     "exception": false,
     "start_time": "2023-03-09T04:54:47.629797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(400, 5)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_set.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c2973433",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:47.654312Z",
     "iopub.status.busy": "2023-03-09T04:54:47.653671Z",
     "iopub.status.idle": "2023-03-09T04:54:47.672269Z",
     "shell.execute_reply": "2023-03-09T04:54:47.671219Z"
    },
    "papermill": {
     "duration": 0.026702,
     "end_time": "2023-03-09T04:54:47.674737",
     "exception": false,
     "start_time": "2023-03-09T04:54:47.648035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#GRTTING_DUMMIES\n",
    "data_set=pd.get_dummies(data_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6de39d4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:47.684648Z",
     "iopub.status.busy": "2023-03-09T04:54:47.684029Z",
     "iopub.status.idle": "2023-03-09T04:54:47.689782Z",
     "shell.execute_reply": "2023-03-09T04:54:47.688884Z"
    },
    "papermill": {
     "duration": 0.012797,
     "end_time": "2023-03-09T04:54:47.691684",
     "exception": false,
     "start_time": "2023-03-09T04:54:47.678887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_set.head()\n",
    "data_set= data_set.drop(\"Gender_Female\",axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cb962ded",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:47.701523Z",
     "iopub.status.busy": "2023-03-09T04:54:47.701159Z",
     "iopub.status.idle": "2023-03-09T04:54:48.300122Z",
     "shell.execute_reply": "2023-03-09T04:54:48.298798Z"
    },
    "papermill": {
     "duration": 0.606369,
     "end_time": "2023-03-09T04:54:48.302174",
     "exception": false,
     "start_time": "2023-03-09T04:54:47.695805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'User ID'}>,\n",
       "        <AxesSubplot:title={'center':'Age'}>],\n",
       "       [<AxesSubplot:title={'center':'EstimatedSalary'}>,\n",
       "        <AxesSubplot:title={'center':'Purchased'}>],\n",
       "       [<AxesSubplot:title={'center':'Gender_Male'}>, <AxesSubplot:>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_set.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2528005c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:48.312772Z",
     "iopub.status.busy": "2023-03-09T04:54:48.312437Z",
     "iopub.status.idle": "2023-03-09T04:54:48.319985Z",
     "shell.execute_reply": "2023-03-09T04:54:48.317407Z"
    },
    "papermill": {
     "duration": 0.015753,
     "end_time": "2023-03-09T04:54:48.322511",
     "exception": false,
     "start_time": "2023-03-09T04:54:48.306758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X= data_set.drop(\"Purchased\",axis=1)\n",
    "y= data_set[\"Purchased\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "368cad57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:48.334277Z",
     "iopub.status.busy": "2023-03-09T04:54:48.333893Z",
     "iopub.status.idle": "2023-03-09T04:54:48.341734Z",
     "shell.execute_reply": "2023-03-09T04:54:48.340770Z"
    },
    "papermill": {
     "duration": 0.018186,
     "end_time": "2023-03-09T04:54:48.345570",
     "exception": false,
     "start_time": "2023-03-09T04:54:48.327384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test=train_test_split(X,y, test_size=0.3,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6bbc723e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:48.357125Z",
     "iopub.status.busy": "2023-03-09T04:54:48.356733Z",
     "iopub.status.idle": "2023-03-09T04:54:48.376640Z",
     "shell.execute_reply": "2023-03-09T04:54:48.375681Z"
    },
    "papermill": {
     "duration": 0.027723,
     "end_time": "2023-03-09T04:54:48.378683",
     "exception": false,
     "start_time": "2023-03-09T04:54:48.350960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "logreg = LogisticRegression()\n",
    "logreg.fit(x_train,y_train)\n",
    "x_pred=logreg.predict(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4ce8788",
   "metadata": {
    "papermill": {
     "duration": 0.004948,
     "end_time": "2023-03-09T04:54:48.389962",
     "exception": false,
     "start_time": "2023-03-09T04:54:48.385014",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "CHECKING ACCURACY OF THE PREDICTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1d0d322c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:48.400602Z",
     "iopub.status.busy": "2023-03-09T04:54:48.400268Z",
     "iopub.status.idle": "2023-03-09T04:54:48.408004Z",
     "shell.execute_reply": "2023-03-09T04:54:48.407090Z"
    },
    "papermill": {
     "duration": 0.01534,
     "end_time": "2023-03-09T04:54:48.409957",
     "exception": false,
     "start_time": "2023-03-09T04:54:48.394617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7916666666666666"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,x_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2d5afb30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-09T04:54:48.420984Z",
     "iopub.status.busy": "2023-03-09T04:54:48.420182Z",
     "iopub.status.idle": "2023-03-09T04:54:48.428733Z",
     "shell.execute_reply": "2023-03-09T04:54:48.427870Z"
    },
    "papermill": {
     "duration": 0.0158,
     "end_time": "2023-03-09T04:54:48.430439",
     "exception": false,
     "start_time": "2023-03-09T04:54:48.414639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[77,  2],\n",
       "       [23, 18]])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,x_pred)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.249429,
   "end_time": "2023-03-09T04:54:49.156028",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-03-09T04:54:37.906599",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
